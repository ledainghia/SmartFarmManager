// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartFarmManager.DataAccessObject.Models;

#nullable disable

namespace SmartFarmManager.DataAccessObject.Migrations
{
    [DbContext(typeof(SmartFarmContext))]
    [Migration("20250320091823_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.AnimalSale", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("FarmingBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SaleDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("SaleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.Property<double?>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__AnimalSa__1EE3C3FF9307295C");

                    b.HasIndex("FarmingBatchId");

                    b.HasIndex("SaleTypeId");

                    b.ToTable("AnimalSales");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.AnimalTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__AnimalTe__F87ADD27AE731EF5");

                    b.ToTable("AnimalTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Cage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<string>("BoardCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("BoardStatus")
                        .HasColumnType("bit");

                    b.Property<string>("CameraUrl")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSolationCage")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PenCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("Id")
                        .HasName("PK__Cages__792D9F9AACADDF50");

                    b.HasIndex("FarmId");

                    b.ToTable("Cages");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.CageStaff", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StaffFarmId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__CageStaf__666D484D977ED0B7");

                    b.HasIndex("CageId");

                    b.HasIndex("StaffFarmId");

                    b.ToTable("CageStaffs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlBoard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CommandOff")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("CommandOn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("ControlBoardCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("ControlBoardTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__ControlB__AB951CC9E119D9D0");

                    b.HasIndex("CageId");

                    b.HasIndex("ControlBoardTypeId");

                    b.ToTable("ControlBoards");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlBoardType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__ControlB__8CDFB1CCB09566BA");

                    b.ToTable("ControlBoardTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlDevice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ControlCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CageId");

                    b.ToTable("ControlDevices");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.CostingReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GeneratedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ReportMonth")
                        .HasColumnType("int");

                    b.Property<int>("ReportYear")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("TotalQuantity")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("CostingReport");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.DailyFoodUsageLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("ActualWeight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime?>("LogTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("RecommendedWeight")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__DailyFoo__29B197206BAA687E");

                    b.HasIndex("StageId");

                    b.ToTable("DailyFoodUsageLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Disease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Diseases");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.EggHarvest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("DateCollected")
                        .HasColumnType("datetime2");

                    b.Property<int>("EggCount")
                        .HasColumnType("int");

                    b.Property<Guid>("GrowthStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GrowthStageId");

                    b.ToTable("EggHarvests");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ElectricityLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalConsumption")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__Electric__0B83AE01DB836F69");

                    b.HasIndex("FarmId");

                    b.ToTable("ElectricityLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Farm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double>("Area")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FarmCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Macaddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("MACAddress");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Farms__ED7BBAB9F3B62FC0");

                    b.ToTable("Farms");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AdminId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AssignedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__FarmAdmi__78A22BE82F789E8F");

                    b.HasIndex("AdminId");

                    b.HasIndex("FarmId");

                    b.ToTable("FarmAdmins");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmCamera", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("ChannelId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__FarmCame__0EBA770C379AB5BB");

                    b.HasIndex("FarmId");

                    b.ToTable("FarmCameras");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastTimeUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxCagesPerStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("MaxFarmingBatchesPerCage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(5);

                    b.Property<int>("TimeDifferenceInMinutes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FarmId")
                        .IsUnique();

                    b.ToTable("FarmConfigs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmSubscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("NumberOfUsers")
                        .HasColumnType("int");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("RequiresVet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__FarmSubs__9A2B249D65D4C549");

                    b.HasIndex("FarmId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("FarmSubscriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmingBatch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CleaningFrequency")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompleteAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeadQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedTimeStart")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FarmingBatchCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__FarmingB__CF22FB97B35EFCF4");

                    b.HasIndex("CageId");

                    b.HasIndex("TemplateId");

                    b.ToTable("FarmingBatchs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FoodStack", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("CostPerKg")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("CurrentStock")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__FoodStac__E117F10707F5099D");

                    b.HasIndex("FarmId");

                    b.ToTable("FoodStack", (string)null);
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FoodTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("FoodType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("StageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("WeightBasedOnBodyMass")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__FoodTemp__58E25FB67BABBFBB");

                    b.HasIndex("StageTemplateId");

                    b.ToTable("FoodTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("AffectedQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("AgeEnd")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AgeEndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AgeStart")
                        .HasColumnType("int");

                    b.Property<DateTime?>("AgeStartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DeadQuantity")
                        .HasColumnType("int");

                    b.Property<Guid>("FarmingBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FoodType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("RecommendedWeightPerSession")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid?>("SaleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("WeightAnimal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("WeightAnimalExpect")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("WeightBasedOnBodyMass")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("Id")
                        .HasName("PK__GrowthSt__03EB7AD8E9B0E8F9");

                    b.HasIndex("FarmingBatchId");

                    b.ToTable("GrowthStages");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStageTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("AgeEnd")
                        .HasColumnType("int");

                    b.Property<int?>("AgeStart")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("SaleTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StageName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("WeightAnimal")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__GrowthSt__12B67065BFCFA63B");

                    b.HasIndex("TemplateId");

                    b.ToTable("GrowthStageTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.HealthLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__HealthLo__C872D3274175629B");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("HealthLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("ControlBoardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JobCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("JobTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("StateSmaller")
                        .HasColumnType("bit");

                    b.Property<double?>("ValueLarger")
                        .HasColumnType("float");

                    b.Property<double?>("ValueSmaller")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Jobs__056690C2461B319B");

                    b.HasIndex("ControlBoardId");

                    b.HasIndex("JobTypeId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("SensorId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.JobLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Command")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("SensorValue")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__JobLogs__2B515D3E32FD6CEE");

                    b.HasIndex("JobId");

                    b.ToTable("JobLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.JobType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK__JobTypes__E1F462AD8039AD4A");

                    b.ToTable("JobTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.LeaveRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StaffFarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.Property<Guid>("UserTempId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StaffFarmId");

                    b.ToTable("LeaveRequest");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MasterData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CostType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id");

                    b.HasIndex("FarmId");

                    b.ToTable("MasterData");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("AffectedQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Diagnosis")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FarmingBatchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("FirstReminderSentAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEmergency")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QuantityInCage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SecondReminderSentAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Pending");

                    b.HasKey("Id")
                        .HasName("PK__MedicalS__E39D8C018EEF7572");

                    b.HasIndex("DiseaseId");

                    b.HasIndex("FarmingBatchId");

                    b.ToTable("MedicalSymptoms");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MedicalSymtomDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("MedicalSymptomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SymptomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicalSymptomId");

                    b.HasIndex("SymptomId");

                    b.ToTable("MedicalSymtomDetails");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Medication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("DoseQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("DoseWeight")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal?>("PricePerDose")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UsageInstructions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK__Medicati__62EC1AFA81A8C124");

                    b.ToTable("Medications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MqttConfig", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("BrokerAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("CleanSession")
                        .HasColumnType("bit");

                    b.Property<int>("KeepAlive")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int>("QoS")
                        .HasColumnType("int");

                    b.Property<bool>("UseTls")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("WillMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id")
                        .HasName("PK__MqttConf__065618CFF49F21BB");

                    b.ToTable("MqttConfigs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("MedicalSymptomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("NotiTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__20CF2E12C83A84F0");

                    b.HasIndex("NotiTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.NotificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("NotiTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Notifica__54F5A3018831B14F");

                    b.HasIndex(new[] { "NotiTypeName" }, "UQ__Notifica__712AE57216695082")
                        .IsUnique();

                    b.ToTable("NotificationTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Picture", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("DateCaptured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Pictures__8C2866D8353C89AA");

                    b.HasIndex("RecordId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Prescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DaysToTake")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("MedicalSymtomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("PrescribedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("QuantityAnimal")
                        .HasColumnType("int");

                    b.Property<int?>("RemainingQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Prescrip__401308323ACA723E");

                    b.HasIndex("MedicalSymtomId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.PrescriptionMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Afternoon")
                        .HasColumnType("int");

                    b.Property<int>("Evening")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<int>("Noon")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Prescrip__CDB4BF945ED62D85");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionMedications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Pricing", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PricePerUnit")
                        .HasColumnType("int");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id")
                        .HasName("PK__Pricings__EC306B12D14952C7");

                    b.ToTable("Pricings");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Roles__8AFACE1A640F661E");

                    b.HasIndex(new[] { "RoleName" }, "UQ__Roles__8A2B61609571AADF")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SaleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Discription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("StageTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("SaleTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ScheduleCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TimeOff")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.Property<string>("TimeOn")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("");

                    b.HasKey("Id")
                        .HasName("PK__Schedule__9C8A5B49CADB8578");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Sensor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("NodeId")
                        .HasColumnType("int");

                    b.Property<int>("PinCode")
                        .HasColumnType("int");

                    b.Property<string>("SensorCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SensorTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id")
                        .HasName("PK__Sensors__D8099BFA33DDEEA4");

                    b.HasIndex("CageId");

                    b.HasIndex("SensorTypeId");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SensorDataLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsWarning")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SensorId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__SensorDa__14C88410F7C62D8F");

                    b.HasIndex("SensorId");

                    b.ToTable("SensorDataLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SensorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("DefaultPinCode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasDefaultValue("");

                    b.HasKey("Id")
                        .HasName("PK__SensorTy__B6E7763F2A9179FF");

                    b.ToTable("SensorTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StandardPrescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("DiseaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RecommendDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DiseaseId");

                    b.ToTable("StandardPrescriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StandardPrescriptionMedication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("Afternoon")
                        .HasColumnType("int");

                    b.Property<int>("Evening")
                        .HasColumnType("int");

                    b.Property<Guid>("MedicationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Morning")
                        .HasColumnType("int");

                    b.Property<int>("Noon")
                        .HasColumnType("int");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MedicationId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("StandardPrescriptionMedications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StatusLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__StatusLo__A1B4D09D3A1C2CC0");

                    b.HasIndex("TaskId");

                    b.ToTable("StatusLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StockLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal?>("CostPerKg")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateOnly>("DateAdded")
                        .HasColumnType("date");

                    b.Property<string>("FoodType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("StackId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__StockLog__730D96D8A3211789");

                    b.HasIndex("StackId");

                    b.ToTable("StockLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SubscriptionPlan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("CostPerUser")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("CostPerVet")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("MonthlyBaseCost")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PlanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__Subscrip__755C22B7124150BB");

                    b.ToTable("SubscriptionPlans");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Symptom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SymptomName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Symptoms");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("AssignedToUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid?>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsTreatmentTask")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWarning")
                        .HasColumnType("bit");

                    b.Property<Guid?>("PrescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PriorityNum")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__Tasks__7C6949B12CFAA294");

                    b.HasIndex("AssignedToUserId");

                    b.HasIndex("CageId");

                    b.HasIndex("TaskTypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskDaily", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EndAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("GrowthStageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GrowthStageId");

                    b.ToTable("TaskDaily", (string)null);
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskDailyTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("GrowthStageTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("TaskTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GrowthStageTemplateId");

                    b.ToTable("TaskDailyTemplate", (string)null);
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("PriorityNum")
                        .HasColumnType("int");

                    b.Property<string>("TaskTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__TaskType__66B23E330DE8C67D");

                    b.HasIndex(new[] { "TaskTypeName" }, "UQ__TaskType__3B9D797BA9BD327F")
                        .IsUnique();

                    b.ToTable("TaskTypes");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("SubscriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id")
                        .HasName("PK__Transact__55433A6BAFE66D2B");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("DeviceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id")
                        .HasName("PK__Users__1788CC4C9404FA6D");

                    b.HasIndex("RoleId");

                    b.HasIndex(new[] { "Username" }, "UQ__Users__536C85E450363FD5")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UQ__Users__A9D10534B1C73AFC")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Vaccine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("AgeEnd")
                        .HasColumnType("int");

                    b.Property<int?>("AgeStart")
                        .HasColumnType("int");

                    b.Property<string>("Method")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id")
                        .HasName("PK__Vaccines__45DC6889A12FCD5C");

                    b.ToTable("Vaccines");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ApplicationAge")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<Guid>("StageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValue("Chua tiêm");

                    b.Property<decimal?>("ToltalPrice")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<Guid>("VaccineId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__VaccineS__9C8A5B49BF96F02B");

                    b.HasIndex("StageId");

                    b.HasIndex("VaccineId");

                    b.ToTable("VaccineSchedules");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineScheduleLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateOnly?>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Notes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Photo")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id")
                        .HasName("PK__VaccineS__E2771C19EB9C932E");

                    b.HasIndex("ScheduleId");

                    b.ToTable("VaccineScheduleLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("ApplicationAge")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationMethod")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Session")
                        .HasColumnType("int");

                    b.Property<Guid>("TemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VaccineName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id")
                        .HasName("PK__VaccineT__B9AB66085E77BB5A");

                    b.HasIndex("TemplateId");

                    b.ToTable("VaccineTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.WaterLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FarmId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("FirstIndexData")
                        .HasColumnType("float");

                    b.Property<double?>("LastIndexData")
                        .HasColumnType("float");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalConsumption")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("Id")
                        .HasName("PK__WaterLog__C32B73CF24992978");

                    b.HasIndex("FarmId");

                    b.ToTable("WaterLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.WhitelistDomain", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.ToTable("WhitelistDomains", (string)null);
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.AnimalSale", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.FarmingBatch", "FarmingBatch")
                        .WithMany("AnimalSales")
                        .HasForeignKey("FarmingBatchId")
                        .IsRequired()
                        .HasConstraintName("FK__AnimalSal__Farmi__160F4887");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.SaleType", "SaleType")
                        .WithMany("AnimalSales")
                        .HasForeignKey("SaleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FarmingBatch");

                    b.Navigation("SaleType");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Cage", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("Cages")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__Farm__CageI__2321213213");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.CageStaff", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("CageStaffs")
                        .HasForeignKey("CageId")
                        .IsRequired()
                        .HasConstraintName("FK__CageStaff__CageI__6A30C649");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "StaffFarm")
                        .WithMany("CageStaffs")
                        .HasForeignKey("StaffFarmId")
                        .IsRequired()
                        .HasConstraintName("FK__CageStaff__Staff__6B24EA82");

                    b.Navigation("Cage");

                    b.Navigation("StaffFarm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlBoard", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("ControlBoards")
                        .HasForeignKey("CageId")
                        .IsRequired()
                        .HasConstraintName("FK__ControlBo__CageI__634EBE90");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.ControlBoardType", "ControlBoardType")
                        .WithMany("ControlBoards")
                        .HasForeignKey("ControlBoardTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__ControlBo__Contr__6442E2C9");

                    b.Navigation("Cage");

                    b.Navigation("ControlBoardType");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlDevice", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("ControlDevices")
                        .HasForeignKey("CageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cage");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.CostingReport", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("CostingReports")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.DailyFoodUsageLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStage", "Stage")
                        .WithMany("DailyFoodUsageLogs")
                        .HasForeignKey("StageId")
                        .IsRequired()
                        .HasConstraintName("FK__DailyFood__Stage__2180FB33");

                    b.Navigation("Stage");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.EggHarvest", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStage", "growthStage")
                        .WithMany("EggHarvests")
                        .HasForeignKey("GrowthStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("growthStage");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ElectricityLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("ElectricityLogs")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__Electrici__FarmI__58D1301D");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmAdmin", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "Admin")
                        .WithMany("FarmAdmins")
                        .HasForeignKey("AdminId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmAdmin__Admin__70DDC3D8");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("FarmAdmins")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmAdmin__FarmI__6FE99F9F");

                    b.Navigation("Admin");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmCamera", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("FarmCameras")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmCamer__FarmI__69FBBC1F");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmConfig", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithOne("FarmConfig")
                        .HasForeignKey("SmartFarmManager.DataAccessObject.Models.FarmConfig", "FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmSubscription", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("FarmSubscriptions")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmSubsc__FarmI__49C3F6B7");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.SubscriptionPlan", "Plan")
                        .WithMany("FarmSubscriptions")
                        .HasForeignKey("PlanId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmSubsc__PlanI__4AB81AF0");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "User")
                        .WithMany("FarmSubscriptions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmSubsc__UserI__4BAC3F29");

                    b.Navigation("Farm");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmingBatch", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("FarmingBatches")
                        .HasForeignKey("CageId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmingBa__CageI__114A936A");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.AnimalTemplate", "Template")
                        .WithMany("FarmingBatches")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK__FarmingBa__Templ__10566F31");

                    b.Navigation("Cage");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FoodStack", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("FoodStacks")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__FoodStack__FarmI__08B54D69");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FoodTemplate", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStageTemplate", "StageTemplate")
                        .WithMany("FoodTemplates")
                        .HasForeignKey("StageTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK__FoodTempl__Stage__60A75C0F");

                    b.Navigation("StageTemplate");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStage", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.FarmingBatch", "FarmingBatch")
                        .WithMany("GrowthStages")
                        .HasForeignKey("FarmingBatchId")
                        .IsRequired()
                        .HasConstraintName("FK__GrowthSta__Farmi__1AD3FDA4");

                    b.Navigation("FarmingBatch");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStageTemplate", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.AnimalTemplate", "Template")
                        .WithMany("GrowthStageTemplates")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK__GrowthSta__Templ__59063A47");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.HealthLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Prescription", "Prescription")
                        .WithMany("HealthLogs")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__HealthLog__Presc__4A8310C6");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Job", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.ControlBoard", "ControlBoard")
                        .WithMany("Jobs")
                        .HasForeignKey("ControlBoardId")
                        .IsRequired()
                        .HasConstraintName("FK__Jobs__ControlBoa__03BB8E22");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.JobType", "JobType")
                        .WithMany("Jobs")
                        .HasForeignKey("JobTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Jobs__JobTypeId__05A3D694");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Schedule", "Schedule")
                        .WithMany("Jobs")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__Jobs__ScheduleId__02C769E9");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Sensor", "Sensor")
                        .WithMany("Jobs")
                        .HasForeignKey("SensorId")
                        .IsRequired()
                        .HasConstraintName("FK__Jobs__SensorId__04AFB25B");

                    b.Navigation("ControlBoard");

                    b.Navigation("JobType");

                    b.Navigation("Schedule");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.JobLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Job", "Job")
                        .WithMany("JobLogs")
                        .HasForeignKey("JobId")
                        .IsRequired()
                        .HasConstraintName("FK__JobLogs__JobId__0E391C95");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.LeaveRequest", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "StaffFarm")
                        .WithMany()
                        .HasForeignKey("StaffFarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StaffFarm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MasterData", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("MasterData")
                        .HasForeignKey("FarmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Disease", "Disease")
                        .WithMany("MedicalSymptoms")
                        .HasForeignKey("DiseaseId");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.FarmingBatch", "FarmingBatch")
                        .WithMany("MedicalSymptoms")
                        .HasForeignKey("FarmingBatchId")
                        .IsRequired()
                        .HasConstraintName("FK__MedicalSy__Farmi__3493CFA7");

                    b.Navigation("Disease");

                    b.Navigation("FarmingBatch");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MedicalSymtomDetail", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", "MedicalSymptom")
                        .WithMany("MedicalSymptomDetails")
                        .HasForeignKey("MedicalSymptomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Symptom", "Symptom")
                        .WithMany("MedicalSymptomDetails")
                        .HasForeignKey("SymptomId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MedicalSymptom");

                    b.Navigation("Symptom");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Notification", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.NotificationType", "NotiType")
                        .WithMany("Notifications")
                        .HasForeignKey("NotiTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__NotiT__531856C7");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Notificat__UserI__5224328E");

                    b.Navigation("NotiType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Picture", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", "Record")
                        .WithMany("Pictures")
                        .HasForeignKey("RecordId")
                        .IsRequired()
                        .HasConstraintName("FK__Pictures__Record__395884C4");

                    b.Navigation("Record");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Prescription", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", "MedicalSymtom")
                        .WithMany("Prescriptions")
                        .HasForeignKey("MedicalSymtomId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Recor__40F9A68C");

                    b.Navigation("MedicalSymtom");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.PrescriptionMedication", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Medication", "Medication")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("MedicationId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Medic__46B27FE2");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Prescription", "Prescription")
                        .WithMany("PrescriptionMedications")
                        .HasForeignKey("PrescriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__Prescript__Presc__45BE5BA9");

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Sensor", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("Sensors")
                        .HasForeignKey("CageId")
                        .IsRequired()
                        .HasConstraintName("FK__Sensors__CageId__7B264821");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.SensorType", "SensorType")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorTypeId")
                        .IsRequired()
                        .HasConstraintName("FK__Sensors__SensorT__7A3223E8");

                    b.Navigation("Cage");

                    b.Navigation("SensorType");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SensorDataLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Sensor", "Sensor")
                        .WithMany("SensorDataLogs")
                        .HasForeignKey("SensorId")
                        .IsRequired()
                        .HasConstraintName("FK__SensorDat__Senso__09746778");

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StandardPrescription", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Disease", "Disease")
                        .WithMany("StandardPrescriptions")
                        .HasForeignKey("DiseaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Disease");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StandardPrescriptionMedication", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Medication", "Medication")
                        .WithMany("StandardPrescriptionMedications")
                        .HasForeignKey("MedicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.StandardPrescription", "Prescription")
                        .WithMany("StandardPrescriptionMedications")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medication");

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StatusLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Task", "Task")
                        .WithMany("StatusLogs")
                        .HasForeignKey("TaskId")
                        .IsRequired()
                        .HasConstraintName("FK__StatusLog__TaskI__02FC7413");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StockLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.FoodStack", "Stack")
                        .WithMany("StockLogs")
                        .HasForeignKey("StackId")
                        .IsRequired()
                        .HasConstraintName("FK__StockLogs__Stack__0C85DE4D");

                    b.Navigation("Stack");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Task", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.User", "AssignedToUser")
                        .WithMany("Tasks")
                        .HasForeignKey("AssignedToUserId")
                        .IsRequired()
                        .HasConstraintName("FK__Tasks__AssignedT__7B5B524B");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Cage", "Cage")
                        .WithMany("Tasks")
                        .HasForeignKey("CageId")
                        .IsRequired()
                        .HasConstraintName("FK__Tasks__CageId__7A672E12");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.TaskType", "TaskType")
                        .WithMany("Tasks")
                        .HasForeignKey("TaskTypeId")
                        .HasConstraintName("FK__Tasks__TaskTypeI__797309D9");

                    b.Navigation("AssignedToUser");

                    b.Navigation("Cage");

                    b.Navigation("TaskType");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskDaily", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStage", "GrowthStage")
                        .WithMany("TaskDailies")
                        .HasForeignKey("GrowthStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowthStage");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskDailyTemplate", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStageTemplate", "GrowthStageTemplate")
                        .WithMany("TaskDailyTemplates")
                        .HasForeignKey("GrowthStageTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GrowthStageTemplate");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Transaction", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.FarmSubscription", "Subscription")
                        .WithMany("Transactions")
                        .HasForeignKey("SubscriptionId")
                        .IsRequired()
                        .HasConstraintName("FK__Transacti__Subsc__5165187F");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.User", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__Users__RoleId__403A8C7D");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineSchedule", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.GrowthStage", "Stage")
                        .WithMany("VaccineSchedules")
                        .HasForeignKey("StageId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineSc__Stage__2BFE89A6");

                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Vaccine", "Vaccine")
                        .WithMany("VaccineSchedules")
                        .HasForeignKey("VaccineId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineSc__Vacci__2B0A656D");

                    b.Navigation("Stage");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineScheduleLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.VaccineSchedule", "Schedule")
                        .WithMany("VaccineScheduleLogs")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineSc__Sched__30C33EC3");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineTemplate", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.AnimalTemplate", "Template")
                        .WithMany("VaccineTemplates")
                        .HasForeignKey("TemplateId")
                        .IsRequired()
                        .HasConstraintName("FK__VaccineTe__Templ__5CD6CB2B");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.WaterLog", b =>
                {
                    b.HasOne("SmartFarmManager.DataAccessObject.Models.Farm", "Farm")
                        .WithMany("WaterLogs")
                        .HasForeignKey("FarmId")
                        .IsRequired()
                        .HasConstraintName("FK__WaterLogs__FarmI__5CA1C101");

                    b.Navigation("Farm");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.AnimalTemplate", b =>
                {
                    b.Navigation("FarmingBatches");

                    b.Navigation("GrowthStageTemplates");

                    b.Navigation("VaccineTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Cage", b =>
                {
                    b.Navigation("CageStaffs");

                    b.Navigation("ControlBoards");

                    b.Navigation("ControlDevices");

                    b.Navigation("FarmingBatches");

                    b.Navigation("Sensors");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlBoard", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.ControlBoardType", b =>
                {
                    b.Navigation("ControlBoards");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Disease", b =>
                {
                    b.Navigation("MedicalSymptoms");

                    b.Navigation("StandardPrescriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Farm", b =>
                {
                    b.Navigation("Cages");

                    b.Navigation("CostingReports");

                    b.Navigation("ElectricityLogs");

                    b.Navigation("FarmAdmins");

                    b.Navigation("FarmCameras");

                    b.Navigation("FarmConfig");

                    b.Navigation("FarmSubscriptions");

                    b.Navigation("FoodStacks");

                    b.Navigation("MasterData");

                    b.Navigation("WaterLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmSubscription", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FarmingBatch", b =>
                {
                    b.Navigation("AnimalSales");

                    b.Navigation("GrowthStages");

                    b.Navigation("MedicalSymptoms");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.FoodStack", b =>
                {
                    b.Navigation("StockLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStage", b =>
                {
                    b.Navigation("DailyFoodUsageLogs");

                    b.Navigation("EggHarvests");

                    b.Navigation("TaskDailies");

                    b.Navigation("VaccineSchedules");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.GrowthStageTemplate", b =>
                {
                    b.Navigation("FoodTemplates");

                    b.Navigation("TaskDailyTemplates");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Job", b =>
                {
                    b.Navigation("JobLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.JobType", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.MedicalSymptom", b =>
                {
                    b.Navigation("MedicalSymptomDetails");

                    b.Navigation("Pictures");

                    b.Navigation("Prescriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Medication", b =>
                {
                    b.Navigation("PrescriptionMedications");

                    b.Navigation("StandardPrescriptionMedications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.NotificationType", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Prescription", b =>
                {
                    b.Navigation("HealthLogs");

                    b.Navigation("PrescriptionMedications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SaleType", b =>
                {
                    b.Navigation("AnimalSales");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Schedule", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Sensor", b =>
                {
                    b.Navigation("Jobs");

                    b.Navigation("SensorDataLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SensorType", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.StandardPrescription", b =>
                {
                    b.Navigation("StandardPrescriptionMedications");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.SubscriptionPlan", b =>
                {
                    b.Navigation("FarmSubscriptions");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Symptom", b =>
                {
                    b.Navigation("MedicalSymptomDetails");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Task", b =>
                {
                    b.Navigation("StatusLogs");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.TaskType", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.User", b =>
                {
                    b.Navigation("CageStaffs");

                    b.Navigation("FarmAdmins");

                    b.Navigation("FarmSubscriptions");

                    b.Navigation("Notifications");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.Vaccine", b =>
                {
                    b.Navigation("VaccineSchedules");
                });

            modelBuilder.Entity("SmartFarmManager.DataAccessObject.Models.VaccineSchedule", b =>
                {
                    b.Navigation("VaccineScheduleLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
