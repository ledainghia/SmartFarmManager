// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;

namespace SmartFarmManager.DataAccessObject.Models;

public partial class SmartFarmContext : DbContext
{

    public SmartFarmContext(DbContextOptions<SmartFarmContext> options)
        : base(options)
    {
    }

    public SmartFarmContext()
    {
    }

    //protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    //{
    //    if (!optionsBuilder.IsConfigured)
    //    {
    //        var environment = Environment.GetEnvironmentVariable("ASPNETCORE_ENVIRONMENT");

    //        IConfigurationRoot configuration = new ConfigurationBuilder()
    //            .SetBasePath(Directory.GetCurrentDirectory())
    //            .AddJsonFile("appsettings.json")
    //            .Build();

    //        string connectionString;

    //        if (environment == "Development")
    //        {
    //            connectionString = configuration.GetConnectionString("DefaultConnection");
    //        }
    //        else // Production
    //        {
    //            connectionString = configuration.GetConnectionString("ProductConnection");
    //        }

    //        optionsBuilder.UseSqlServer(connectionString);
    //    }
    //}
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        //optionsBuilder.UseSqlServer("Server=localhost;Database=Farm3;User Id=sa;Password=12345;Encrypt=True;TrustServerCertificate=True;");
        optionsBuilder.UseSqlServer("Server=103.48.193.165,5053;Database=Farm4;User Id=sa;Password=YourStronggg@Passw0rd;Encrypt=True;TrustServerCertificate=True;");

    }

    public virtual DbSet<AnimalSale> AnimalSales { get; set; }

    public virtual DbSet<AnimalTemplate> AnimalTemplates { get; set; }

    public virtual DbSet<Cage> Cages { get; set; }

    public virtual DbSet<CageStaff> CageStaffs { get; set; }

    public virtual DbSet<ControlBoard> ControlBoards { get; set; }

    public virtual DbSet<ControlBoardType> ControlBoardTypes { get; set; }

    public virtual DbSet<DailyFoodUsageLog> DailyFoodUsageLogs { get; set; }

    public virtual DbSet<ElectricityLog> ElectricityLogs { get; set; }

    public virtual DbSet<Farm> Farms { get; set; }

    public virtual DbSet<FarmAdmin> FarmAdmins { get; set; }

    public virtual DbSet<FarmCamera> FarmCameras { get; set; }

    public virtual DbSet<FarmSubscription> FarmSubscriptions { get; set; }

    public virtual DbSet<FarmingBatch> FarmingBatchs { get; set; }

    public virtual DbSet<FoodStack> FoodStacks { get; set; }

    public virtual DbSet<FoodTemplate> FoodTemplates { get; set; }

    public virtual DbSet<GrowthStage> GrowthStages { get; set; }

    public virtual DbSet<GrowthStageTemplate> GrowthStageTemplates { get; set; }

    public virtual DbSet<HealthLog> HealthLogs { get; set; }

    public virtual DbSet<Job> Jobs { get; set; }

    public virtual DbSet<JobLog> JobLogs { get; set; }

    public virtual DbSet<JobType> JobTypes { get; set; }

    public virtual DbSet<MedicalSymptom> MedicalSymptoms { get; set; }

    public virtual DbSet<Medication> Medications { get; set; }

    public virtual DbSet<MqttConfig> MqttConfigs { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationType> NotificationTypes { get; set; }

    public virtual DbSet<Picture> Pictures { get; set; }

    public virtual DbSet<Prescription> Prescriptions { get; set; }

    public virtual DbSet<PrescriptionMedication> PrescriptionMedications { get; set; }

    public virtual DbSet<Pricing> Pricings { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<Sensor> Sensors { get; set; }

    public virtual DbSet<SensorDataLog> SensorDataLogs { get; set; }

    public virtual DbSet<SensorType> SensorTypes { get; set; }


    public virtual DbSet<StatusLog> StatusLogs { get; set; }

    public virtual DbSet<StockLog> StockLogs { get; set; }

    public virtual DbSet<SubscriptionPlan> SubscriptionPlans { get; set; }

    public virtual DbSet<Task> Tasks { get; set; }

    public virtual DbSet<TaskType> TaskTypes { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vaccine> Vaccines { get; set; }

    public virtual DbSet<VaccineSchedule> VaccineSchedules { get; set; }

    public virtual DbSet<VaccineScheduleLog> VaccineScheduleLogs { get; set; }

    public virtual DbSet<VaccineTemplate> VaccineTemplates { get; set; }

    public virtual DbSet<WaterLog> WaterLogs { get; set; }
    public virtual DbSet<TaskDaily> TaskDailies { get; set; }
    public virtual DbSet<EggHarvest> EggHarvests { get; set; }
    public virtual DbSet<SaleType> SaleTypes { get; set; }
    public virtual DbSet<Symptom> Symptoms { get; set; }
    public virtual DbSet<MedicalSymtomDetail> MedicalSymtomDetails { get; set; }
    public virtual DbSet<Disease> Diseases { get; set; }
    public virtual DbSet<StandardPrescription> StandardPrescriptions { get; set; }
    public virtual  DbSet<ControlDevice> ControlDevices { get; set; }

    public virtual DbSet<StandardPrescriptionMedication> StandardPrescriptionMedications { get; set; }
    public virtual DbSet<MasterData> MasterData { get; set; }
    public virtual DbSet<WhitelistDomain> WhitelistDomains { get; set; }
    public virtual DbSet<FarmConfig> FarmConfigs { get; set; }

    public virtual DbSet<TaskDailyTemplate>  TaskDailyTemplates { get; set; }





    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {

        modelBuilder.Entity<FarmConfig>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e=>e.MaxCagesPerStaff).HasDefaultValue(5);
            entity.Property(e => e.MaxFarmingBatchesPerCage).HasDefaultValue(5);
            entity.Property(e => e.TimeDifferenceInMinutes).HasDefaultValue(0);
            entity.HasOne(e => e.Farm)
            .WithOne(f => f.FarmConfig)
            .HasForeignKey<FarmConfig>(e => e.FarmId);
        });
        modelBuilder.Entity<WhitelistDomain>(entity =>
        {
            entity.ToTable("WhitelistDomains");

            entity.HasKey(e => e.Id);

            entity.Property(e => e.Domain)
                .IsRequired()
                .HasMaxLength(255);

            entity.Property(e => e.ApiKey)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.IsActive)
                .HasDefaultValue(true);
        });
        modelBuilder.Entity<CostingReport>(entity =>
        {
            entity.HasKey(e => e.Id); // Đặt Id làm khóa chính
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ReportMonth)
                .IsRequired(); // Tháng bắt buộc

            entity.Property(e => e.ReportYear)
                .IsRequired(); // Năm bắt buộc

            entity.Property(e => e.CostType)
                .HasMaxLength(50) // Tối đa 50 ký tự
                .IsRequired(); // Loại chi phí bắt buộc

            entity.Property(e => e.TotalQuantity)
                .HasColumnType("decimal(10, 2)") // Định dạng decimal cho tổng số lượng
                .IsRequired(); // Bắt buộc

            entity.Property(e => e.TotalCost)
                .HasColumnType("decimal(10, 2)") // Định dạng decimal cho tổng chi phí
                .IsRequired(); // Bắt buộc

            entity.Property(e => e.GeneratedAt)
                .HasDefaultValueSql("GETDATE()") // Mặc định là thời gian hiện tại
                .IsRequired(); // Bắt buộc

            // Thiết lập quan hệ với bảng Farm
            entity.HasOne(e => e.Farm)
                .WithMany(f => f.CostingReports)
                .HasForeignKey(e => e.FarmId)
                .OnDelete(DeleteBehavior.Cascade); // Xóa Farm sẽ xóa các báo cáo liên quan
        });

        modelBuilder.Entity<MasterData>(entity =>
        {

            entity.HasKey(e => e.Id); // Đặt Id làm khóa chính
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CostType)
                .HasMaxLength(50) // Tối đa 50 ký tự
                .IsRequired(false); // Không bắt buộc

            entity.Property(e => e.Unit)
                .HasMaxLength(50) // Tối đa 50 ký tự
                .IsRequired(false); // Không bắt buộc

            entity.Property(e => e.UnitPrice)
                .HasColumnType("decimal(10, 2)"); // Giá trị decimal với (10, 2)

            entity.HasOne(e => e.Farm) // Thiết lập quan hệ với Farm
                .WithMany(f => f.MasterData)
                .HasForeignKey(e => e.FarmId)
                .OnDelete(DeleteBehavior.Cascade); // Xóa cascade
        });

        modelBuilder.Entity<ControlDevice>(entity =>
        {

            entity.HasKey(e => e.Id); // Đặt Id làm khóa chính

            entity.Property(e => e.Id)
                .HasDefaultValueSql("(newid())");

            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100); // Tên thiết bị, bắt buộc, tối đa 100 ký tự

            entity.Property(e => e.Type)
                .HasMaxLength(50); // Loại thiết bị, tối đa 50 ký tự

            entity.Property(e => e.ControlCode)
                .IsRequired()
                .HasMaxLength(50); // Lệnh điều khiển, bắt buộc, tối đa 50 ký tự

            entity.Property(e => e.Command)
                .HasMaxLength(255); 


            entity.HasOne(e => e.Cage) // Thiết lập quan hệ với bảng Cage
                .WithMany(c => c.ControlDevices) // Một Cage có nhiều ControlDevice
                .HasForeignKey(e => e.CageId) // Khóa ngoại là CageId
                .OnDelete(DeleteBehavior.Cascade); // Xóa Cascade nếu Cage bị xóa
        });
        modelBuilder.Entity<Symptom>(entity =>
        {

            entity.HasKey(e => e.Id); // Khóa chính

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

            entity.Property(e => e.SymptomName)
                .HasMaxLength(200)
                .IsRequired(); // Triệu chứng không được để trống

            // Thiết lập quan hệ với MedicalSymptomDetail
            entity.HasMany(e => e.MedicalSymptomDetails)
                  .WithOne(e => e.Symptom)
                  .HasForeignKey(e => e.SymptomId)
                  .OnDelete(DeleteBehavior.Cascade); // Xóa triệu chứng sẽ xóa liên kết
        });
        modelBuilder.Entity<MedicalSymtomDetail>(entity =>
        {

            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");

            entity.HasOne(e => e.MedicalSymptom)
                  .WithMany(ms => ms.MedicalSymptomDetails)
                  .HasForeignKey(e => e.MedicalSymptomId)
                  .OnDelete(DeleteBehavior.Cascade);
            entity.HasOne(e => e.Symptom)
                  .WithMany(s => s.MedicalSymptomDetails)
                  .HasForeignKey(e => e.SymptomId)
                  .OnDelete(DeleteBehavior.Restrict);
        });
    
        modelBuilder.Entity<SaleType>(entity =>
        {

            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.StageTypeName)
                  .HasMaxLength(100)
                  .IsRequired();

            entity.Property(e => e.Discription)
                  .HasMaxLength(255);

            // Quan hệ với AnimalSale
            entity.HasMany(st => st.AnimalSales)
                  .WithOne(asale => asale.SaleType)
                  .HasForeignKey(asale => asale.SaleTypeId)
                  .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<EggHarvest>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DateCollected)
                  .IsRequired();

            entity.Property(e => e.EggCount)
                  .IsRequired();

            entity.Property(e => e.Notes)
                  .HasMaxLength(255);

            entity.HasOne(e => e.growthStage)
                  .WithMany(g => g.EggHarvests)
                  .HasForeignKey(e => e.GrowthStageId)
                  .OnDelete(DeleteBehavior.Cascade);
        });

        // LeaveRequest Configuration
        modelBuilder.Entity<LeaveRequest>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.Property(e => e.Status)
                  .HasMaxLength(50)
                  .HasDefaultValue("Pending");

            entity.Property(e => e.CreatedAt)
                  .HasDefaultValueSql("GETDATE()");

            entity.Property(e => e.Reason)
                  .HasMaxLength(255);

            entity.Property(e => e.Notes)
                  .HasMaxLength(255);

            // Foreign Key: StaffFarmId -> Users(UserId)
            entity.HasOne(e => e.StaffFarm)
                  .WithMany()
                  .HasForeignKey(e => e.StaffFarmId)
                  .OnDelete(DeleteBehavior.Cascade);


        });



        // TaskDaily
        modelBuilder.Entity<TaskDaily>(entity =>
        {
            entity.ToTable("TaskDaily");
            entity.HasKey(e => e.Id);

            entity.Property(e => e.TaskName)
                  .HasMaxLength(50)
                  .IsRequired();

            entity.Property(e => e.Description)
                  .HasMaxLength(255);

            entity.Property(e => e.Session)
                  .IsRequired();

            entity.HasOne(e => e.GrowthStage)
                  .WithMany()
                  .HasForeignKey(e => e.GrowthStageId)
                  .OnDelete(DeleteBehavior.Cascade);
        });

        // TaskDailyTemplate
        modelBuilder.Entity<TaskDailyTemplate>(entity =>
        {
            entity.ToTable("TaskDailyTemplate");
            entity.HasKey(e => e.Id);

            entity.Property(e => e.TaskName)
                  .HasMaxLength(50)
                  .IsRequired();

            entity.Property(e => e.Description)
                  .HasMaxLength(255);

            entity.Property(e => e.Session)
                  .IsRequired();

            entity.HasOne(e => e.GrowthStageTemplate)
                  .WithMany()
                  .HasForeignKey(e => e.GrowthStageTemplateId)
                  .OnDelete(DeleteBehavior.Cascade);
        });
        modelBuilder.Entity<AnimalSale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalSa__1EE3C3FF9307295C");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.SaleDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");


            entity.HasOne(d => d.FarmingBatch).WithMany(p => p.AnimalSales)
                .HasForeignKey(d => d.FarmingBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__AnimalSal__Farmi__160F4887");
            entity.HasOne(e => e.SaleType)
          .WithMany(st => st.AnimalSales)
          .HasForeignKey(e => e.SaleTypeId)
          .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<AnimalTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__AnimalTe__F87ADD27AE731EF5");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Species)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Cage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Cages__792D9F9AACADDF50");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BoardCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CameraUrl)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PenCode)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.HasOne(c => c.Farm).WithMany(f => f.Cages)
            .HasForeignKey(c => c.FarmId)
            .OnDelete(DeleteBehavior.ClientSetNull)
            .HasConstraintName("FK__Farm__CageI__2321213213");
        });

        modelBuilder.Entity<CageStaff>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__CageStaf__666D484D977ED0B7");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AssignedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Cage).WithMany(p => p.CageStaffs)
                .HasForeignKey(d => d.CageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CageStaff__CageI__6A30C649");

            entity.HasOne(d => d.StaffFarm).WithMany(p => p.CageStaffs)
                .HasForeignKey(d => d.StaffFarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__CageStaff__Staff__6B24EA82");
        });

        modelBuilder.Entity<ControlBoard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ControlB__AB951CC9E119D9D0");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CommandOff)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.CommandOn)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.ControlBoardCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Cage).WithMany(p => p.ControlBoards)
                .HasForeignKey(d => d.CageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ControlBo__CageI__634EBE90");

            entity.HasOne(d => d.ControlBoardType).WithMany(p => p.ControlBoards)
                .HasForeignKey(d => d.ControlBoardTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__ControlBo__Contr__6442E2C9");
        });

        modelBuilder.Entity<ControlBoardType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__ControlB__8CDFB1CCB09566BA");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<DailyFoodUsageLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__DailyFoo__29B197206BAA687E");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ActualWeight).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.LogTime)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Photo).HasMaxLength(255);
            entity.Property(e => e.RecommendedWeight).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Stage).WithMany(p => p.DailyFoodUsageLogs)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__DailyFood__Stage__2180FB33");
        });

        modelBuilder.Entity<ElectricityLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Electric__0B83AE01DB836F69");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TotalConsumption).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Farm).WithMany(p => p.ElectricityLogs)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Electrici__FarmI__58D1301D");
        });

        modelBuilder.Entity<Farm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Farms__ED7BBAB9F3B62FC0");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Address).HasMaxLength(255);
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FarmCode).HasMaxLength(50);
            entity.Property(e => e.Macaddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("MACAddress");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(50);
        });

        modelBuilder.Entity<FarmAdmin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FarmAdmi__78A22BE82F789E8F");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AssignedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Admin).WithMany(p => p.FarmAdmins)
                .HasForeignKey(d => d.AdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmAdmin__Admin__70DDC3D8");

            entity.HasOne(d => d.Farm).WithMany(p => p.FarmAdmins)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmAdmin__FarmI__6FE99F9F");
        });

        modelBuilder.Entity<FarmCamera>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FarmCame__0EBA770C379AB5BB");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(2000);
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Url)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Farm).WithMany(p => p.FarmCameras)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmCamer__FarmI__69FBBC1F");
        });

        modelBuilder.Entity<FarmSubscription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FarmSubs__9A2B249D65D4C549");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.RequiresVet).HasDefaultValue(false);
            entity.Property(e => e.StartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TotalCost).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Farm).WithMany(p => p.FarmSubscriptions)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmSubsc__FarmI__49C3F6B7");

            entity.HasOne(d => d.Plan).WithMany(p => p.FarmSubscriptions)
                .HasForeignKey(d => d.PlanId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmSubsc__PlanI__4AB81AF0");

            entity.HasOne(d => d.User).WithMany(p => p.FarmSubscriptions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmSubsc__UserI__4BAC3F29");
        });

        modelBuilder.Entity<FarmingBatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FarmingB__CF22FB97B35EFCF4");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.StartDate)
                .HasColumnType("datetime");

            entity.HasOne(d => d.Cage).WithMany(p => p.FarmingBatches)
                .HasForeignKey(d => d.CageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmingBa__CageI__114A936A");

            entity.HasOne(d => d.Template).WithMany(p => p.FarmingBatches)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FarmingBa__Templ__10566F31");
        });

        modelBuilder.Entity<FoodStack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FoodStac__E117F10707F5099D");

            entity.ToTable("FoodStack");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CostPerKg).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CurrentStock).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FoodType).HasMaxLength(100);
            entity.Property(e => e.Quantity).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Farm).WithMany(p => p.FoodStacks)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FoodStack__FarmI__08B54D69");
        });

        modelBuilder.Entity<FoodTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__FoodTemp__58E25FB67BABBFBB");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.FoodType)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.WeightBasedOnBodyMass).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.StageTemplate).WithMany(p => p.FoodTemplates)
                .HasForeignKey(d => d.StageTemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__FoodTempl__Stage__60A75C0F");
        });

        modelBuilder.Entity<GrowthStage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GrowthSt__03EB7AD8E9B0E8F9");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AgeEndDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.AgeStartDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.WeightAnimalExpect).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Name).HasMaxLength(50);
            entity.Property(e => e.RecommendedWeightPerSession).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.WeightAnimal).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.WeightBasedOnBodyMass).HasColumnType("decimal(5, 2)");

            entity.HasOne(d => d.FarmingBatch).WithMany(p => p.GrowthStages)
                .HasForeignKey(d => d.FarmingBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GrowthSta__Farmi__1AD3FDA4");
            entity.HasMany(gs => gs.TaskDailies)
                .WithOne(td => td.GrowthStage)
                .HasForeignKey(td => td.GrowthStageId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<GrowthStageTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__GrowthSt__12B67065BFCFA63B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.StageName).HasMaxLength(50);
            entity.Property(e => e.WeightAnimal).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Template).WithMany(p => p.GrowthStageTemplates)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__GrowthSta__Templ__59063A47");
            entity.HasMany(gst => gst.TaskDailyTemplates)
        .WithOne(tdt => tdt.GrowthStageTemplate)
        .HasForeignKey(tdt => tdt.GrowthStageTemplateId)
        .OnDelete(DeleteBehavior.Cascade);

        });

        modelBuilder.Entity<HealthLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__HealthLo__C872D3274175629B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Photo).HasMaxLength(255);

            entity.HasOne(d => d.Prescription).WithMany(p => p.HealthLogs)
                .HasForeignKey(d => d.PrescriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__HealthLog__Presc__4A8310C6");
        });

        modelBuilder.Entity<Job>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Jobs__056690C2461B319B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.JobCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.ControlBoard).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.ControlBoardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Jobs__ControlBoa__03BB8E22");

            entity.HasOne(d => d.JobType).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.JobTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Jobs__JobTypeId__05A3D694");

            entity.HasOne(d => d.Schedule).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.ScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Jobs__ScheduleId__02C769E9");

            entity.HasOne(d => d.Sensor).WithMany(p => p.Jobs)
                .HasForeignKey(d => d.SensorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Jobs__SensorId__04AFB25B");
        });

        modelBuilder.Entity<JobLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__JobLogs__2B515D3E32FD6CEE");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Command).HasMaxLength(255);

            entity.HasOne(d => d.Job).WithMany(p => p.JobLogs)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__JobLogs__JobId__0E391C95");
        });

        modelBuilder.Entity<JobType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__JobTypes__E1F462AD8039AD4A");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<MedicalSymptom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MedicalS__E39D8C018EEF7572");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Diagnosis).HasMaxLength(100);
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Pending");

            

            entity.HasOne(d => d.FarmingBatch).WithMany(p => p.MedicalSymptoms)
                .HasForeignKey(d => d.FarmingBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__MedicalSy__Farmi__3493CFA7");
        });

        modelBuilder.Entity<Medication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Medicati__62EC1AFA81A8C124");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.UsageInstructions)
                        .HasMaxLength(255) // Hướng dẫn sử dụng, tối đa 255 ký tự
                        .IsRequired(false);

            entity.Property(e => e.Price)
                .HasColumnType("decimal(10, 2)"); // Giá của thuốc, định dạng decimal

            entity.Property(e => e.DoseWeight)
                .HasColumnType("int"); // Khối lượng liều (mg)

            entity.Property(e => e.Weight)
                .HasColumnType("int"); // Khối lượng thuốc (mg)

            entity.Property(e => e.DoseQuantity)
                .HasColumnType("int"); // Số lượng liều (mg)

            entity.Property(e => e.PricePerDose)
                .HasColumnType("decimal(10, 2)"); // Giá mỗi liều
        });

        modelBuilder.Entity<MqttConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__MqttConf__065618CFF49F21BB");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.BrokerAddress).HasMaxLength(255);
            entity.Property(e => e.Password).HasMaxLength(50);
            entity.Property(e => e.UserName).HasMaxLength(50);
            entity.Property(e => e.WillMessage).HasMaxLength(2000);
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__20CF2E12C83A84F0");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.IsRead).HasDefaultValue(false);

            entity.HasOne(d => d.NotiType).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.NotiTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Notificat__NotiT__531856C7");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Notificat__UserI__5224328E");
        });

        modelBuilder.Entity<NotificationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Notifica__54F5A3018831B14F");

            entity.HasIndex(e => e.NotiTypeName, "UQ__Notifica__712AE57216695082").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.NotiTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Picture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Pictures__8C2866D8353C89AA");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.DateCaptured)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Image).HasMaxLength(255);

            entity.HasOne(d => d.Record).WithMany(p => p.Pictures)
                .HasForeignKey(d => d.RecordId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Pictures__Record__395884C4");
        });

        modelBuilder.Entity<Prescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Prescrip__401308323ACA723E");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.PrescribedDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.Price).HasColumnType("decimal(10, 2)");
            

            entity.HasOne(d => d.MedicalSymtom).WithMany(p => p.Prescriptions)
                .HasForeignKey(d => d.MedicalSymtomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Prescript__Recor__40F9A68C");
        });

        modelBuilder.Entity<PrescriptionMedication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Prescrip__CDB4BF945ED62D85");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Notes).HasMaxLength(255);

            entity.HasOne(d => d.Medication).WithMany(p => p.PrescriptionMedications)
                .HasForeignKey(d => d.MedicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Prescript__Medic__46B27FE2");

            entity.HasOne(d => d.Prescription).WithMany(p => p.PrescriptionMedications)
                .HasForeignKey(d => d.PrescriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Prescript__Presc__45BE5BA9");
        });

        modelBuilder.Entity<Pricing>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Pricings__EC306B12D14952C7");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Unit).IsRequired();
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__8AFACE1A640F661E");

            entity.HasIndex(e => e.RoleName, "UQ__Roles__8A2B61609571AADF").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Schedule__9C8A5B49CADB8578");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.ScheduleCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.TimeOff)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
            entity.Property(e => e.TimeOn)
                .IsRequired()
                .HasMaxLength(50)
                .HasDefaultValue("");
        });

        modelBuilder.Entity<Sensor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Sensors__D8099BFA33DDEEA4");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.SensorCode)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Cage).WithMany(p => p.Sensors)
                .HasForeignKey(d => d.CageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Sensors__CageId__7B264821");

            entity.HasOne(d => d.SensorType).WithMany(p => p.Sensors)
                .HasForeignKey(d => d.SensorTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Sensors__SensorT__7A3223E8");
        });

        modelBuilder.Entity<SensorDataLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SensorDa__14C88410F7C62D8F");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Data)
         .IsRequired(false) // Không bắt buộc
         .HasColumnType("nvarchar(max)"); 
            entity.HasOne(d => d.Sensor).WithMany(p => p.SensorDataLogs)
                .HasForeignKey(d => d.SensorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__SensorDat__Senso__09746778");
        });

        modelBuilder.Entity<SensorType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__SensorTy__B6E7763F2A9179FF");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Description).HasMaxLength(2000);
            entity.Property(e => e.FieldName)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValue("");
            entity.Property(e => e.Unit)
                .IsRequired()
                .HasMaxLength(255)
                .HasDefaultValue("");
        });


        modelBuilder.Entity<StatusLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__StatusLo__A1B4D09D3A1C2CC0");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.UpdatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");


            entity.HasOne(d => d.Task).WithMany(p => p.StatusLogs)
                .HasForeignKey(d => d.TaskId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StatusLog__TaskI__02FC7413");
        });

        modelBuilder.Entity<StockLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__StockLog__730D96D8A3211789");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CostPerKg).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.FoodType).HasMaxLength(100);
            entity.Property(e => e.Quantity).HasColumnType("decimal(10, 2)");

            entity.HasOne(d => d.Stack).WithMany(p => p.StockLogs)
                .HasForeignKey(d => d.StackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__StockLogs__Stack__0C85DE4D");
        });

        modelBuilder.Entity<SubscriptionPlan>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Subscrip__755C22B7124150BB");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CostPerUser).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.CostPerVet).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.MonthlyBaseCost).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PlanName)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Task>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Tasks__7C6949B12CFAA294");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.CompletedAt).HasColumnType("datetime");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Description).HasMaxLength(255);
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TaskName)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.AssignedToUser).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.AssignedToUserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Tasks__AssignedT__7B5B524B");

            entity.HasOne(d => d.Cage).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.CageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Tasks__CageId__7A672E12");

            entity.HasOne(d => d.TaskType).WithMany(p => p.Tasks)
                .HasForeignKey(d => d.TaskTypeId)
                .HasConstraintName("FK__Tasks__TaskTypeI__797309D9");
        });

        modelBuilder.Entity<TaskType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__TaskType__66B23E330DE8C67D");

            entity.HasIndex(e => e.TaskTypeName, "UQ__TaskType__3B9D797BA9BD327F").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.TaskTypeName)
                .IsRequired()
                .HasMaxLength(50);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Transact__55433A6BAFE66D2B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Amount).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.PaymentMethod).HasMaxLength(50);
            entity.Property(e => e.Remarks).HasMaxLength(255);
            entity.Property(e => e.Status).HasMaxLength(50);
            entity.Property(e => e.TransactionDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");

            entity.HasOne(d => d.Subscription).WithMany(p => p.Transactions)
                .HasForeignKey(d => d.SubscriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Transacti__Subsc__5165187F");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__1788CC4C9404FA6D");

            entity.HasIndex(e => e.Username, "UQ__Users__536C85E450363FD5").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Users__A9D10534B1C73AFC").IsUnique();

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Address).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(100);
            entity.Property(e => e.FullName).HasMaxLength(100);
            entity.Property(e => e.IsActive).HasDefaultValue(true);
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PhoneNumber).HasMaxLength(15);
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50);

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__Users__RoleId__403A8C7D");
        });

        modelBuilder.Entity<Vaccine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Vaccines__45DC6889A12FCD5C");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.AgeEnd)
                .HasColumnType("int");
            entity.Property(e => e.AgeStart)
                .HasColumnType("int");
            entity.Property(e=>e.TotalDose)
                .HasColumnType("int");
            entity.Property(e => e.PricePerDose)
                .HasColumnType("decimal(10, 2)");

            entity.Property(e => e.Method).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<VaccineSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VaccineS__9C8A5B49BF96F02B");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e=>e.ToltalPrice).HasColumnType("decimal(10, 2)");
            entity.Property(e => e.Status)
                .HasMaxLength(50)
                .HasDefaultValue("Chua tiêm");

            entity.HasOne(d => d.Stage).WithMany(p => p.VaccineSchedules)
                .HasForeignKey(d => d.StageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineSc__Stage__2BFE89A6");

            entity.HasOne(d => d.Vaccine).WithMany(p => p.VaccineSchedules)
                .HasForeignKey(d => d.VaccineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineSc__Vacci__2B0A656D");
        });

        modelBuilder.Entity<VaccineScheduleLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VaccineS__E2771C19EB9C932E");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Notes).HasMaxLength(255);
            entity.Property(e => e.Photo).HasMaxLength(255);

            entity.HasOne(d => d.Schedule).WithMany(p => p.VaccineScheduleLogs)
                .HasForeignKey(d => d.ScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineSc__Sched__30C33EC3");
        });

        modelBuilder.Entity<VaccineTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__VaccineT__B9AB66085E77BB5A");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.ApplicationMethod).HasMaxLength(50);
            entity.Property(e => e.VaccineName).HasMaxLength(100);

            entity.HasOne(d => d.Template).WithMany(p => p.VaccineTemplates)
                .HasForeignKey(d => d.TemplateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__VaccineTe__Templ__5CD6CB2B");
        });

        modelBuilder.Entity<WaterLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__WaterLog__C32B73CF24992978");

            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e=>e.TotalConsumption).HasColumnType("decimal(10, 2)");
            entity.HasOne(d => d.Farm).WithMany(p => p.WaterLogs)
                .HasForeignKey(d => d.FarmId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK__WaterLogs__FarmI__5CA1C101");
        });
        modelBuilder.Entity<Disease>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.Property(e => e.Name).IsRequired().HasMaxLength(200);
            entity.Property(e => e.Description).HasMaxLength(500);
        });
        modelBuilder.Entity<StandardPrescription>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.HasOne(e => e.Disease)
                .WithMany(d => d.StandardPrescriptions)
                .HasForeignKey(e => e.DiseaseId)
                .OnDelete(DeleteBehavior.Cascade);
            entity.Property(e => e.Notes).HasMaxLength(255);
        });
        modelBuilder.Entity<StandardPrescriptionMedication>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.Property(e => e.Id).HasDefaultValueSql("(newid())");
            entity.HasOne(e => e.Prescription)
                .WithMany(p => p.StandardPrescriptionMedications)
                .HasForeignKey(e => e.PrescriptionId)
                .OnDelete(DeleteBehavior.Cascade);
            entity.HasOne(e => e.Medication)
                .WithMany(m => m.StandardPrescriptionMedications)
                .HasForeignKey(e => e.MedicationId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}